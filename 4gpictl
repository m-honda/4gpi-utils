#!/bin/bash
#
# control 4GPi module
#
VERSION="2.0"

GPIOCHIP=gpiochip0
TIMEOUT=40
CONFIG=/etc/default/4gpi

USAGE="Usage: 4gpictl [ OPTION ] COMMAND

Commands:
  poweron              power on module
  poweroff             power off module
  reset                reset module
  status               show power status
  version              display version and exit
  help                 display help and exit

Options:
  -t, --timeout <N>    set timeout to N sec
  -c, --config <FILE>  read config from FILE
  --nowait             do not wait for change of power status
"

#
# Usage: stat_gpio [GPIO_PIN]
#
stat_gpio ()
{
    case "$(gpioget $GPIOCHIP $1)" in
    0)
        echo "off"
        ;;
    1)
        echo "on"
        ;;
    *)
        echo "unknown"
        return 1
        ;;
    esac
}

#
# Usage: ctl_gpio [CONDITION] [GPIO_PIN] [TOGGLE_INTERVAL] [TIMEOUT]
#
ctl_gpio ()
{
    local i

    for i in `seq 0 $4`
    do
        STATUS=$(stat_gpio $STATUS_PIN)

        if [ $? -ne 0 ]
        then
            echo "$STATUS"
            return 1
        fi

        if [ $STATUS = $1 ]
        then
            if [ $i -eq 0 ]
            then
                echo "already power $1"
            fi
            return 0
        fi

        if [ $i -eq 0 ]
        then
            if [ $4 -eq 0 ]
            then
                gpioset --background --mode=time --sec=$3 $GPIOCHIP $2=1
                return 0
            else
                gpioset --mode=time --sec=$3 $GPIOCHIP $2=1
            fi
            if [ $1 = "reset" ]
            then
                return 0
            fi
        fi
        sleep 1
    done

    echo "timeout power $1"

    return 1
}

#
# Usage: 4gpi_power {on|off|reset|show}
#
4gpi_power ()
{
    case $1 in
    on)
        ctl_gpio on $POWER_PIN 3 $TIMEOUT
        ;;
    off)
        ctl_gpio off $POWER_PIN 3 $TIMEOUT
        ;;
    reset)
        ctl_gpio reset $RESET_PIN 1 $TIMEOUT
        ;;
    show)
        stat_gpio $STATUS_PIN
        ;;
    *)
        echo "Usage: 4gpictl $POWER_USAGE"
        exit 1
        ;;
    esac
}


ARGS=($@)
#
# check options
#
for i in $(seq 0 $((${#ARGS[@]} - 1)))
do
    case ${ARGS[$i]} in
    -t|--timeout)
        TIMEOUT=${ARGS[$(($i + 1))]}
        unset ARGS[$i]
        unset ARGS[$(($i + 1))]
        ;;
    -c|--config)
        CONFIG=${ARGS[$(($i + 1))]}
        unset ARGS[$i]
        unset ARGS[$(($i + 1))]
        ;;
    --nowait)
        TIMEOUT=0
        unset ARGS[$i]
        ;;
    *)
        ;;
    esac
done

[ -r $CONFIG ] && . $CONFIG

ARGS=(${ARGS[@]})
#
# execute command
#
case ${ARGS[0]} in
poweron|--poweron)
    ctl_gpio on $POWER_PIN 3 $TIMEOUT
    ;;
poweroff|--poweroff)
    ctl_gpio off $POWER_PIN 3 $TIMEOUT
    ;;
reset|--reset)
    ctl_gpio reset $RESET_PIN 1 $TIMEOUT
    ;;
status|--status)
    stat_gpio $STATUS_PIN
    ;;
version|--version|-v)
    echo "4gpictl version $VERSION"
    ;;
help|--help|-h)
    echo "$USAGE"
    ;;
*)
    echo "$USAGE"
    exit 1
    ;;
esac

if [ $? -ne 0 ]
then
    echo "error: command failure"
    exit 2
fi

